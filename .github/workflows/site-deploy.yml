name: Deploy website (Pages) + Health & Auto-Rollback

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  BACKUP_BRANCH: pages-backup
  CUSTOM_URL: https://www.virtauto.de

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Append news.json (Deploy start)
        shell: bash
        run: |
          set -e
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          ev="Deploy start"
          ag="CI/CD"
          su="Deployment pipeline triggered"
          if [ ! -f news.json ]; then
            echo "[{"ts":"$ts","event":"$ev","agent":"$ag","summary":"$su"}]" > "$tmp"
          else
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '$ARGS.named as $i | [ { "ts": $i.ts, "event": $i.ev, "agent": $i.ag, "summary": $i.su } ] + . + (input // [])' <(cat <<'JSON'
[]
JSON
) news.json > news.tmp && mv news.tmp "$tmp"
          fi
          mv "$tmp" news.json

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: pages
        uses: actions/deploy-pages@v4

      - name: Append news.json (Deploy success)
        shell: bash
        run: |
          set -e
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          ev="Deployment"
          ag="CI/CD"
          su="Website successfully updated"
          if [ ! -f news.json ]; then
            echo "[{"ts":"$ts","event":"$ev","agent":"$ag","summary":"$su"}]" > "$tmp"
          else
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '$ARGS.named as $i | [ { "ts": $i.ts, "event": $i.ev, "agent": $i.ag, "summary": $i.su } ] + . + (input // [])' <(cat <<'JSON'
[]
JSON
) news.json > news.tmp && mv news.tmp "$tmp"
          fi
          mv "$tmp" news.json
          # keep an artifact copy of the news.json for debugging
          tar czf news-${GITHUB_RUN_ID}.tgz news.json
      - name: Upload news artifact
        uses: actions/upload-artifact@v4
        with:
          name: news-${{ github.run_id }}
          path: news-${{ github.run_id }}.tgz

  healthcheck:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4

      - name: Check homepage (200 expected, 3 retries)
        id: hc
        shell: bash
        env:
          URL_IN: ${{ env.CUSTOM_URL }}
        run: |
          set -e
          URL="${URL_IN}"
          if [ -z "$URL" ]; then
            URL="${{ needs.deploy.outputs.page_url || '' }}"
          fi
          if [ -z "$URL" ]; then
            echo "No healthcheck URL provided"; exit 1
          fi
          echo "Healthcheck on $URL"
          ok=0
          for i in 1 2 3; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Try $i: HTTP $code"
            if [ "$code" -eq 200 ]; then ok=1; break; fi
            sleep 5
          done
          if [ $ok -ne 1 ]; then
            echo "status=bad" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "status=good" >> $GITHUB_OUTPUT

      - name: Append news.json (Healthcheck failed)
        if: failure()
        shell: bash
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          ev="Healthcheck failed"
          ag="monitor"
          su="Site unreachable"
          if [ ! -f news.json ]; then
            echo "[{"ts":"$ts","event":"$ev","agent":"$ag","summary":"$su"}]" > "$tmp"
          else
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '$ARGS.named as $i | [ { "ts": $i.ts, "event": $i.ev, "agent": $i.ag, "summary": $i.su } ] + . + (input // [])' <(cat <<'JSON'
[]
JSON
) news.json > news.tmp && mv news.tmp "$tmp"
          fi
          mv "$tmp" news.json

  rollback:
    runs-on: ubuntu-latest
    needs: healthcheck
    if: failure()
    steps:
      - uses: actions/checkout@v4

      - name: Append news.json (Rollback)
        shell: bash
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          ev="Rollback"
          ag="CI/CD"
          su="Restored from backup"
          if [ ! -f news.json ]; then
            echo "[{"ts":"$ts","event":"$ev","agent":"$ag","summary":"$su"}]" > "$tmp"
          else
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '$ARGS.named as $i | [ { "ts": $i.ts, "event": $i.ev, "agent": $i.ag, "summary": $i.su } ] + . + (input // [])' <(cat <<'JSON'
[]
JSON
) news.json > news.tmp && mv news.tmp "$tmp"
          fi
          mv "$tmp" news.json

      - name: Upload rollback info (unique)
        uses: actions/upload-artifact@v4
        with:
          name: rollback-${{ github.run_id }}
          path: news.json

  update-backup:
    runs-on: ubuntu-latest
    needs: healthcheck
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update backup branch with current site
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -B "$BACKUP_BRANCH"
          git add -A
          git commit -m "backup from ${GITHUB_SHA}" || echo "No changes to commit"
          git push origin "$BACKUP_BRANCH" --force
