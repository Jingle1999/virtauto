name: Deploy website (Pages) + Health & Auto-Rollback

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  BACKUP_BRANCH: pages-backup
  CUSTOM_URL: https://www.virtauto.de

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
      # fetch-depth 1 is fine here; full history only needed for backup job
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Append news.json (Deploy start)
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          jq -n --arg ts "$ts" --arg ev "Deploy start" --arg ag "CI/CD" --arg su "Deployment pipeline triggered"             '[{"ts":$ts,"event":$ev,"agent":$ag,"summary":$su}]' > "$tmp"
          if [ -f news.json ]; then
            jq -s '.[0] + .[1]' "$tmp" news.json > news.tmp && mv news.tmp news.json
          else
            mv "$tmp" news.json
          fi

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: pages
        uses: actions/deploy-pages@v4

      - name: Append news.json (Deploy success)
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          jq -n --arg ts "$ts" --arg ev "Deployment" --arg ag "CI/CD" --arg su "Website successfully updated"             '[{"ts":$ts,"event":$ev,"agent":$ag,"summary":$su}]' > "$tmp"
          if [ -f news.json ]; then
            jq -s '.[0] + .[1]' "$tmp" news.json > news.tmp && mv news.tmp news.json
          else
            mv "$tmp" news.json
          fi

  healthcheck:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check homepage (200 expected, 3 retries)
        shell: bash
        run: |
          URL="${CUSTOM_URL}"
          if [ -z "$URL" ]; then
            echo "::warning::No CUSTOM_URL provided; trying GitHub Pages URL fallback"
            URL="${{ needs.deploy.outputs.page_url }}"
          fi

          echo "Healthcheck on $URL"

          for i in 1 2 3; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i -> HTTP $code"
            if [ "$code" -eq 200 ]; then
              exit 0
            fi
            sleep 5
          done

          # log failure and then fail the job (to trigger rollback)
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          jq -n --arg ts "$ts" --arg ev "Healthcheck failed" --arg ag "Monitor" --arg su "Site unreachable"             '[{"ts":$ts,"event":$ev,"agent":$ag,"summary":$su}]' > "$tmp"
          if [ -f news.json ]; then
            jq -s '.[0] + .[1]' "$tmp" news.json > news.tmp && mv news.tmp news.json
          else
            mv "$tmp" news.json
          fi

          exit 1

  rollback:
    runs-on: ubuntu-latest
    needs: healthcheck
    if: ${{ failure() }}
    steps:
      - name: Append news.json (Rollback)
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          jq -n --arg ts "$ts" --arg ev "Rollback" --arg ag "CI/CD" --arg su "Restored from backup"             '[{"ts":$ts,"event":$ev,"agent":$ag,"summary":$su}]' > "$tmp"
          if [ -f news.json ]; then
            jq -s '.[0] + .[1]' "$tmp" news.json > news.tmp && mv news.tmp news.json
          else
            mv "$tmp" news.json
          fi

  update-backup:
    runs-on: ubuntu-latest
    needs: [healthcheck]
    if: ${{ success() }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update backup branch with current site
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@github.com"

          # Ensure branch exists locally
          if git show-ref --verify --quiet "refs/heads/${BACKUP_BRANCH}"; then
            git checkout "${BACKUP_BRANCH}"
          else
            git checkout -B "${BACKUP_BRANCH}"
          fi

          # Stage & commit (allow empty commit if nothing changed)
          git add -A
          git commit -m "backup from ${GITHUB_SHA}" || echo "No changes to commit"

          # Push backup branch
          git push origin "${BACKUP_BRANCH}" --force
