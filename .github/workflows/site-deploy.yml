
name: Deploy website (Pages) + Health & Auto-Rollback

on:
  push:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  SITE_URL: "https://www.virtauto.de"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Upload website artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

  healthcheck:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for site to be reachable (robust healthcheck with retries)
        shell: bash
        run: |
          echo "➡️  Healthcheck for ${SITE_URL}"
          attempt=0
          max=10
          sleep_secs=10
          while (( attempt < max )); do
            attempt=$((attempt+1))
            ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "⏳ [${ts}] Attempt ${attempt}/${max} ..."
            url="${SITE_URL}?_=${RANDOM}${RANDOM}"
            http_code=$(curl -sS -o body.txt -w "%{http_code}" -L "$url" || echo "000")
            size=$(wc -c < body.txt | tr -d ' ')
            echo "    -> http_code=${http_code}, bytes=${size}"
            if [[ "${http_code}" == "200" && "${size}" -gt 100 ]]; then
              echo "✅ Healthcheck OK"
              exit 0
            fi
            echo "   Waiting ${sleep_secs}s and retry ..."
            sleep "${sleep_secs}"
          done
          echo "❌ Healthcheck failed after ${max} attempts"
          exit 1

  rollback:
    if: ${{ needs.healthcheck.result == 'failure' }}
    needs: [deploy, healthcheck]
    runs-on: ubuntu-latest
    steps:
      - name: Rollback placeholder
        run: |
          echo "::warning::Healthcheck failed – rollback hook reached."
          echo "Implement your restore logic here (e.g., redeploy last successful backup)."

  update-backup:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (for backup context)
        uses: actions/checkout@v4

      - name: Create simple tarball backup of current repo state
        run: |
          tar --exclude="./.git" -czf "site-backup-${{ github.run_id }}.tar.gz" .
          ls -lah "site-backup-${{ github.run_id }}.tar.gz"

      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: "site-backup-${{ github.run_id }}"
          path: "site-backup-${{ github.run_id }}.tar.gz"
          retention-days: 14
