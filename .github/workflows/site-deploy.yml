
name: Deploy website (Pages) + Health & Auto-Rollback

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  BACKUP_BRANCH: pages-backup
  CUSTOM_URL: https://www.virtauto.de

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # ---- Log: Deploy start -------------------------------------------------
      - name: Append news.json (Deploy start)
        shell: bash
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          ev="Deploy start"
          ag="CI/CD"
          su="Deployment pipeline triggered"
          if [ -f news.json ]; then
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '([{ "ts": $ts, "event": $ev, "agent": $ag, "summary": $su }] + .)[0:50]' news.json > "$tmp" && mv "$tmp" news.json
          else
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '[{ "ts": $ts, "event": $ev, "agent": $ag, "summary": $su }]' > "$tmp" && mv "$tmp" news.json
          fi

      # ---- Package current site for Pages -----------------------------------
      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: pages
        uses: actions/deploy-pages@v4

      # ---- Log: Deploy success ----------------------------------------------
      - name: Append news.json (Deploy success)
        shell: bash
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          ev="Deployment"
          ag="CI/CD"
          su="Website successfully updated"
          if [ -f news.json ]; then
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '([{ "ts": $ts, "event": $ev, "agent": $ag, "summary": $su }] + .)[0:50]' news.json > "$tmp" && mv "$tmp" news.json
          else
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '[{ "ts": $ts, "event": $ev, "agent": $ag, "summary": $su }]' > "$tmp" && mv "$tmp" news.json
          fi

  healthcheck:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Determine URL
        id: url
        shell: bash
        run: |
          if [ -n "${{ env.CUSTOM_URL }}" ]; then
            echo "url=${{ env.CUSTOM_URL }}" >> $GITHUB_OUTPUT
          else
            # Fallback â€“ we could also extract from deploy output if needed
            echo "url=https://www.virtauto.de" >> $GITHUB_OUTPUT
          fi

      - name: Healthcheck (200-399 accepted, 3 retries)
        shell: bash
        run: |
          URL="${{ steps.url.outputs.url }}"
          if [ -z "$URL" ]; then
            echo "No URL provided"; exit 1
          fi
          echo "Run healthcheck on: $URL"
          ok=0
          for i in 1 2 3; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i -> HTTP $code"
            if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then
              ok=1; break;
            fi
            sleep 3
          done
          if [ "$ok" -ne 1 ]; then
            echo "Healthcheck failed"
            exit 1
          fi

  rollback:
    runs-on: ubuntu-latest
    needs: healthcheck
    if: failure()
    steps:
      - name: Checkout repo (for logging)
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # NOTE:
      # To avoid artifact name conflict (github-pages) on the same run,
      # we only log the rollback event here. If you want to re-deploy a
      # backup automatically, you must use an alternative deploy method
      # that does not rely on 'upload-pages-artifact' with fixed name.
      - name: Append news.json (Rollback)
        shell: bash
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp=$(mktemp)
          ev="Rollback"
          ag="Healthcheck"
          su="Restored from backup"
          if [ -f news.json ]; then
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '([{ "ts": $ts, "event": $ev, "agent": $ag, "summary": $su }] + .)[0:50]' news.json > "$tmp" && mv "$tmp" news.json
          else
            jq -n --arg ts "$ts" --arg ev "$ev" --arg ag "$ag" --arg su "$su"               '[{ "ts": $ts, "event": $ev, "agent": $ag, "summary": $su }]' > "$tmp" && mv "$tmp" news.json
          fi

  update-backup:
    runs-on: ubuntu-latest
    needs: healthcheck
    if: success()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Update backup branch with current site
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git fetch origin "$BACKUP_BRANCH" || true
          git checkout -B "$BACKUP_BRANCH"
          # Commit everything (news.json included) to the backup
          git add -A
          git commit -m "backup from ${GITHUB_SHA}" || echo "No changes to commit"
          git push origin "$BACKUP_BRANCH" --force
