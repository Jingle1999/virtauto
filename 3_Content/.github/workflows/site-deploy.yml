name: Deploy website (Pages) + Health & Auto-Rollback

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write        # write to backup branch
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  CUSTOM_URL: https://www.virtauto.de    # ändere auf deine Domain oder lasse leer
  BACKUP_BRANCH: pages-backup            # Branch mit letzter „guter“ Version

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Upload artifact (site/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  healthcheck:
    runs-on: ubuntu-latest
    needs: deploy
    outputs:
      ok: ${{ steps.check.outputs.ok }}
      used_url: ${{ steps.check.outputs.used_url }}
    steps:
      - name: Check live homepage (200 expected)
        id: check
        shell: bash
        run: |
          set -e
          # Fallback auf Pages-URL, wenn CUSTOM_URL leer ist
          USED_URL="${{ env.CUSTOM_URL }}"
          if [ -z "$USED_URL" ] || [[ "$USED_URL" == "https://"*"/" && "$USED_URL" == "https:///" ]]; then
            USED_URL="${{ needs.deploy.outputs.page_url }}"
          fi
          echo "Using URL: $USED_URL"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$USED_URL")
          echo "HTTP $code"
          if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
          fi
          echo "used_url=$USED_URL" >> $GITHUB_OUTPUT

  rollback:
    # Rollback, falls Healthcheck fehlschlägt
    if: needs.healthcheck.outputs.ok != 'true'
    runs-on: ubuntu-latest
    needs: [build, deploy, healthcheck]
    steps:
      - name: Checkout backup branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BACKUP_BRANCH }}
          fetch-depth: 0
      - name: Ensure backup exists
        run: |
          if [ ! -d "site" ]; then
            echo "::error::No 'site/' folder found in backup branch '${{ env.BACKUP_BRANCH }}'."
            exit 1
          fi
      - name: Upload backup artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site
      - name: Deploy backup to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  update-backup:
    # Aktualisiert den Backup-Branch nur, wenn Healthcheck OK
    if: needs.healthcheck.outputs.ok == 'true'
    runs-on: ubuntu-latest
    needs: [build, deploy, healthcheck]
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare backup worktree
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Erstelle Branch, falls er nicht existiert
          if ! git ls-remote --exit-code --heads origin "${{ env.BACKUP_BRANCH }}"; then
            echo "Creating backup branch ${{ env.BACKUP_BRANCH }}"
            git checkout --orphan "${{ env.BACKUP_BRANCH }}"
            git rm -rf . || true
            mkdir -p site
            echo "<!doctype html><title>Backup init</title>Backup branch initialized." > site/index.html
            git add site
            git commit -m "chore(backup): initialize backup branch"
            git push -u origin "${{ env.BACKUP_BRANCH }}"
            git checkout -
          fi
      - name: Checkout backup branch
        run: |
          git checkout "${{ env.BACKUP_BRANCH }}"
      - name: Sync 'site/' from main
        run: |
          git checkout main -- site
          git add site
          git commit -m "chore(backup): update last-good site from main @ $GITHUB_SHA" || echo "No changes to commit"
          git push origin "${{ env.BACKUP_BRANCH }}"
